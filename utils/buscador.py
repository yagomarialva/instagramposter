import os
import time
import requests
from googlesearch import search
from bs4 import BeautifulSoup
from newspaper import Article
from datetime import datetime
from gtts import gTTS
from pydub import AudioSegment
from io import BytesIO
import pyttsx3

def criar_pasta(pasta):
    """Cria a pasta se ela n√£o existir, agora com caminho absoluto ou relativo."""
    if not os.path.exists(pasta):
        os.makedirs(pasta)

def buscar_noticias(termo, num_resultados=50):
    """Busca links de not√≠cias relevantes no Google."""
    print(f"üîç Buscando not√≠cias sobre: {termo}...")
    query = f"{termo} not√≠cia"
    resultados = search(query, num_results=num_resultados, lang="pt")
    
    # Filtrando apenas links que realmente s√£o artigos de not√≠cias
    links_filtrados = [url for url in resultados if "news.google.com" not in url and "/search?" not in url]
    
    return links_filtrados[:num_resultados]

def extrair_noticia(url):
    """Extrai t√≠tulo, data e conte√∫do completo da not√≠cia."""
    try:
        article = Article(url)
        article.download()
        article.parse()

        titulo = article.title if article.title else "Sem t√≠tulo"
        data_publicacao = article.publish_date.strftime("%d/%m/%Y %H:%M") if article.publish_date else "Data n√£o encontrada"
        conteudo = article.text if article.text else "Conte√∫do n√£o encontrado"

        return {
            "titulo": titulo,
            "data": data_publicacao,
            "url": url,
            "conteudo": conteudo
        }
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao extrair not√≠cia de {url}: {e}")
        return None

def salvar_em_txt_individual(termo, noticias):
    """Salva cada not√≠cia em um arquivo de texto individual em uma pasta fora do diret√≥rio atual."""
    pasta = "../noticias"  # Caminho absoluto ou relativo fora da pasta do script
    criar_pasta(pasta)
    
    intro = "Bem-vindo ao podcast de ufologia. Aqui est√£o as not√≠cias mais recentes sobre fen√¥menos ufol√≥gicos!"
    
    for idx, noticia in enumerate(noticias, 1):
        # Verifica se a not√≠cia tem pelo menos 500 palavras
        conteudo_noticia = noticia['conteudo']
        num_palavras = len(conteudo_noticia.split())
        
        if num_palavras >= 200:
            # Nome do arquivo baseado no t√≠tulo da not√≠cia (removendo caracteres especiais)
            nome_arquivo = f"noticia_{idx}_{noticia['titulo'].replace(' ', '_').replace('/', '-')}.txt"
            caminho_arquivo = os.path.join(pasta, nome_arquivo)

            with open(caminho_arquivo, "w", encoding="utf-8") as file:
                file.write(f"üì∞ Not√≠cia sobre: {termo}\n")
                file.write("=" * 80 + "\n\n")
                file.write(f"{intro}\n\n") 
                file.write(f"{noticia['titulo']}\n")
                file.write(f"üìÖ Data: {noticia['data']}\n")
                file.write(f"üîó Link: {noticia['url']}\n\n")
                file.write(f"{noticia['conteudo']}\n")
                file.write("=" * 80 + "\n\n")
                time.sleep(2)  # Evita bloqueios

            print(f"\n‚úÖ Arquivo salvo como: {caminho_arquivo}")
        else:
            print(f"‚ö†Ô∏è A not√≠cia '{noticia['titulo']}' n√£o tem 200 palavras e foi ignorada.")

def gerar_podcast(texto, nome_arquivo):
    """Converte o texto em fala e salva como arquivo MP3 em um diret√≥rio fora do script."""
    pasta = "../podcasts"  # Caminho absoluto ou relativo fora da pasta do script
    criar_pasta(pasta)
    nome_arquivo_podcast = os.path.join(pasta, nome_arquivo)

    try:
        tts = gTTS(text=texto, lang='pt')
        
        tts.save('temp_audio.mp3')        
        audio = AudioSegment.from_mp3('temp_audio.mp3')        
        audio.export(nome_arquivo_podcast, format="mp3")
        
        print(f"üéß Podcast salvo como: {nome_arquivo_podcast}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao gerar o podcast: {e}")


def gerar_podcast_para_noticias(noticias):
    print("\nüéôÔ∏è Gerando podcasts para as not√≠cias...")
    """Gera podcasts para todas as not√≠cias extra√≠das."""
    
    intro = "Bem-vindo ao podcast de ufologia. Aqui est√£o as not√≠cias mais recentes sobre fen√¥menos ufol√≥gicos!\n\n"
    
    for idx, noticia in enumerate(noticias, 1):
        titulo = noticia['titulo']
        conteudo = noticia['conteudo']
        
        texto_podcast = f"{intro}{titulo}\n\n{conteudo}"
        
        nome_arquivo_podcast = f"podcast_noticia_{idx}_{titulo}.mp3"
        
        gerar_podcast(texto_podcast, nome_arquivo_podcast)


if __name__ == "__main__":
    termo_pesquisa = input("Digite o termo para buscar not√≠cias: ")
    links_noticias = buscar_noticias(termo_pesquisa)
    
    noticias_extraidas = []
    for link in links_noticias:
        print(f"üìÑ Extraindo: {link}")
        noticia = extrair_noticia(link)
        if noticia:
            noticias_extraidas.append(noticia)

    salvar_em_txt_individual(termo_pesquisa, noticias_extraidas)
    
    gerar_podcast_para_noticias(noticias_extraidas)
